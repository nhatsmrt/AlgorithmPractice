from collections import Counter

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        # Time Complexity: O(V^2 + E)
        # Space Complexity: O(V + E)

        adj_lists = {i: [] for i in range(len(graph))}

        for i in range(len(graph)):
            for j in range(i + 1, len(graph)):
                if graph[i][j]:
                    adj_lists[i].append(j)
                    adj_lists[j].append(i)

        # find connected components
        component_map = {}
        component_size = Counter()

        for i in range(len(graph)):
            if i not in component_map:
                self._dfs(adj_lists, component_map, component_size, i, i)

        initial_comp_cnter = Counter()
        for infected in initial:
            initial_comp_cnter[component_map[infected]] += 1

        node_to_save, saved = None, None
        for infected in initial:
            root = component_map[infected]
            comp_initial = initial_comp_cnter[root]
            comp_size = component_size[root]
            cand_saved = 0 if comp_initial > 1 else comp_size

            if node_to_save is None or saved < cand_saved or (saved == cand_saved and infected < node_to_save):
                node_to_save = infected
                saved = cand_saved

        return node_to_save

    def _dfs(self, adj_lists, component_map, component_size, node, root):
        component_map[node] = root
        component_size[root] += 1

        for neigh in adj_lists[node]:
            if neigh not in component_map:
                self._dfs(adj_lists, component_map, component_size, neigh, root)
